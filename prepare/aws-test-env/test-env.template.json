{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "AWS Automation Test Environment",

	"Parameters" : {
        "CidrBlock": {
            "Description": "The Cidr Block to use for this VPC",
            "Type": "String",
            "Default": "10.57.0.0/16",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
		"AvailabilityZone" : {
			"Description" : "The Availability Zone to locate instances in. (0->a, 1->b, etc)",
			"Type" : "Number",
			"Default" : "2"
        },
        "DomainName": {
            "Description": "Domain Name of test environment local URLs",
            "Type": "String",
            "Default" : "autotest.porterscloud",
            "AllowedPattern": "([a-z][a-z0-9-]*[a-z0-9]+)(\\.[a-z][a-z0-9-]*[a-z0-9]+)*",
			"ConstraintDescription": "must be a valid domain name"
        },
        "EnvName": {
            "Description": "Prefix of the exported variables. Needs to be unique to the account. Change if you need more that one environment per account.",
            "Type": "String",
            "Default" : "AutoTest"
        }
	},

	"Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": { "Ref": "CidrBlock" },
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "Tags" : [  ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": { }
        },
        "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": { "Ref": "VPC" },
                "InternetGatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": { "Ref": "VPC" }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
                "RouteTableId": { "Ref": "PublicRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": { "Ref": "InternetGateway" }
            }
        },
        "PrivateRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties":{
                "VpcId": { "Ref": "VPC" }
            }
        },
        "PrivateRouteToInternet": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateRouteTable" },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": { "Ref": "NATGateway" }
            }
        },
        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": { "Ref": "VPC" }
            }
        },
        "InboundPublicNetworkAclEntry":{
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "OutboundPublicNetworkAclEntry":{
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": { "Ref": "PublicNetworkAcl" },
                "RuleNumber": "100",
                "Protocol": "-1",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "NATGatewayIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "DockerServerSubnet": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone": { "Fn::Select" : [ {"Ref": "AvailabilityZone"} , {"Fn::GetAZs": { "Ref" : "AWS::Region" } } ] },
                "CidrBlock" : { "Fn::Select" : [ 0, { "Fn::Cidr" : [{ "Fn::GetAtt" : [ "VPC", "CidrBlock" ]}, 1, 10 ]}]},
                "MapPublicIpOnLaunch" : false,
                "Tags" : [ 
                    {
                        "Key": "Name",
                        "Value": "AutomationTest DockerServer"
                    },
                    {
                        "Key": "NetworkType",
                        "Value": "Protected"
                    }
                ],
                "VpcId" : { "Ref" : "VPC" }
            }
        },
        "TestRunnerSubnet": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone": { "Fn::Select" : [ {"Ref": "AvailabilityZone"} , {"Fn::GetAZs": { "Ref" : "AWS::Region" } } ] },
                "CidrBlock" : { "Fn::Select" : [ 1, { "Fn::Cidr" : [{ "Fn::GetAtt" : [ "VPC", "CidrBlock" ]}, 2, 10 ]}]},
                "MapPublicIpOnLaunch" : true,
                "Tags" : [ 
                    {
                        "Key": "Name",
                        "Value": "AutomationTest Test Runner"
                    },
                    {
                        "Key": "NetworkType",
                        "Value": "Public"
                    }
                ],
                "VpcId" : { "Ref" : "VPC" }
            }
        },
        "ControlSubnet": {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "AvailabilityZone": { "Fn::Select" : [ {"Ref": "AvailabilityZone"} , {"Fn::GetAZs": { "Ref" : "AWS::Region" } } ] },
                "CidrBlock" : { "Fn::Select" : [ 2, { "Fn::Cidr" : [{ "Fn::GetAtt" : [ "VPC", "CidrBlock" ]}, 3, 10 ]}]},
                "MapPublicIpOnLaunch" : true,
                "Tags" : [ 
                    {
                        "Key": "Name",
                        "Value": "AutomationTest Control"
                    },
                    {
                        "Key": "NetworkType",
                        "Value": "Public"
                    }
                ],
                "VpcId" : { "Ref" : "VPC" }
            }
        },
        "TestRunnerRouteTableAssociation":{
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "TestRunnerSubnet" },
                "RouteTableId": { "Ref": "PublicRouteTable"}
            }
        },        
        "ControlRouteTableAssociation":{
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "ControlSubnet" },
                "RouteTableId": { "Ref": "PublicRouteTable"}
            }
        },
        "DockerServerRouteTableAssociation":{
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "DockerServerSubnet" },
                "RouteTableId": { "Ref": "PrivateRouteTable"}
            }
        },
        "TestRunnerSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "TestRunnerSubnet" },
                "NetworkAclId": {"Ref": "PublicNetworkAcl" }
            }
        },
        "ControlSubnetNetworkAclAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": { "Ref": "ControlSubnet" },
                "NetworkAclId": {"Ref": "PublicNetworkAcl" }
            }
        },
        "NATGateway":{
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [ "NATGatewayIP", "AllocationId" ]
                },
                "SubnetId": { "Ref": "ControlSubnet" }
            }
        },
        "IAMRoleDockerServer": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "RoleName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServer" ]]},
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                }
            }
        },        
        "IAMRoleControl": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "RoleName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Control" ]]},
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                }
            }
        },
        "IAMRoleCreateAMI": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "RoleName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]]},
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                }
            }
        },        
        "IAMRoleTestRunner": {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "RoleName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunner" ]]},
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [ "ec2.amazonaws.com" ]
                        },
                        "Action": [ "sts:AssumeRole" ]
                    } ]
                }
            }
        },
        "IAMPolicyBase": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Base" ]]},
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "*",
                        "Resource": "*"
                  } ] 
                },
                "Roles": [ { "Ref": "IAMRoleDockerServer" }, { "Ref": "IAMRoleTestRunner" }, { "Ref": "IAMRoleControl" }, { "Ref": "IAMRoleCreateAMI" } ]
            }
        },
        "IAMPolicyDockerServer": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServer" ]]},
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "*",
                        "Resource": "*"
                  } ] 
                },
                "Roles": [ {
                    "Ref": "IAMRoleDockerServer"
                } ]
            }
        },
        "IAMPolicyTestRunner": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunner" ]]},
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "*",
                        "Resource": "*"
                  } ] 
                },
                "Roles": [ {
                    "Ref": "IAMRoleTestRunner"
                } ]
            }
        },
        "IAMPolicyControlSlave": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Control" ]]},
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "*",
                        "Resource": "*"
                  } ] 
                },
                "Roles": [ {
                    "Ref": "IAMRoleControl"
                } ]
            }
        },
        "IAMPolicyCreateAMI": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]]},
                "PolicyDocument": {
                    "Version" : "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Action": "*",
                        "Resource": "*"
                  } ] 
                },
                "Roles": [ {
                    "Ref": "IAMRoleCreateAMI"
                } ]
            }
        },
        "ControlSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join": [ "-", [{"Ref":"EnvName"}, "ControlSlave" ]] },
                "GroupName" : { "Fn::Join": [ "-", [{"Ref":"EnvName"}, "ControlSlave" ]] },
                "SecurityGroupIngress" : [ {
                    "CidrIp" : "0.0.0.0/0",
                    "FromPort" : 22,
                    "IpProtocol" : "tcp",
                    "ToPort" : 22
                  } ],
                "VpcId" : {"Ref": "VPC"}
            }
        },        
        "CreateAMISecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : { "Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]] },
                "GroupName" : { "Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]] },
                "SecurityGroupIngress" : [ {
                    "CidrIp" : "0.0.0.0/0",
                    "FromPort" : 22,
                    "IpProtocol" : "tcp",
                    "ToPort" : 22
                  } ],
                "VpcId" : {"Ref": "VPC"}
            }
        },
        "IAMProfileDockerServer": {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServer" ]]},
                "Roles" : [ {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServer" ]]} ]
            },
            "DependsOn" : "IAMRoleDockerServer"
        },
        "IAMProfileTestRunner":{
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName":  {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunner" ]]},
                "Roles" : [ {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunner" ]]} ]
            },
            "DependsOn" : "IAMRoleTestRunner"
        },
        "IAMProfileControl":{
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName":  {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Control" ]]},
                "Roles" : [ {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Control" ]]} ]
            },
            "DependsOn" : "IAMRoleControl"
        },
        "IAMProfileCreateAMI":{
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "InstanceProfileName":  {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]]},
                "Roles" : [ {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMI" ]]} ]
            },
            "DependsOn" : "IAMRoleCreateAMI"
        },
        "Domain": {
            "Type": "AWS::Route53::HostedZone",
            "Properties": {
                "HostedZoneConfig": {
                    "Comment": "Automation Test Env HostedZone"
                },
                "HostedZoneTags" : [ ],
                "Name" : {"Ref": "DomainName"},
                "VPCs" : [ 
                    {
                        "VPCId": { "Ref": "VPC" },
                        "VPCRegion": { "Ref": "AWS::Region" }
                    }
                ]
            }
        },
        "Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "LifecycleConfiguration": {
                    "Rules": [
                        { 
                            "Prefix": "tmp/",
                            "Status": "Enabled",
                            "ExpirationInDays": 1
                        }
                    ]
                }
            },
            "DeletionPolicy" : "Delete"
        },
        "JenkinsUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Policies" : [ 
                    {
                        "PolicyName": {"Fn::Join": [ ".", [{"Ref":"EnvName"}, "JenkinsUser" ]]},
                        "PolicyDocument": {
                            "Version" : "2012-10-17",
                            "Statement": [ 
                                {
                                    "Effect": "Allow",
                                    "Action": "iam:PassRole",
                                    "Resource": [ 
                                        {"Fn::GetAtt" : ["IAMRoleCreateAMI", "Arn"] },
                                        {"Fn::GetAtt" : ["IAMRoleControl", "Arn"] },
                                        {"Fn::GetAtt" : ["IAMRoleTestRunner", "Arn"] }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeImages",
                                        "cloudformation:ListExports",
                                        "ec2:DescribeInstanceStatus",
                                        "ec2:DescribeInstances",
                                        "ec2:CreateImage",
                                        "account:ListRegions",
                                        "ec2:DescribeRegions",
                                        "iam:ListInstanceProfilesForRole",
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeInstances",
                                        "ec2:DescribeKeyPairs",
                                        "ec2:DescribeAvailabilityZones",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:DescribeSubnets",
                                        "iam:ListInstanceProfilesForRole",
                                        "ec2:GetConsoleOutput",
                                        "ecr:ListTagsForResource",
                                        "ecr:UploadLayerPart",
                                        "ecr:ListImages",
                                        "ecr:CompleteLayerUpload",
                                        "ecr:TagResource",
                                        "ecr:DescribeRepositories",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:CreateRepository",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:PutImage",
                                        "ecr:BatchGetImage",
                                        "ecr:DescribeImages",
                                        "ecr:InitiateLayerUpload"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": ["ec2:RunInstances", "ec2:CreateTags", "ec2:TerminateInstances", "ec2:StopInstances"],
                                    "Resource": "arn:aws:ec2:*:*:instance/*",
                                    "Condition": {
                                        "ForAnyValue:ArnEquals": {
                                            "ec2:InstanceProfile": [
                                                {"Fn::GetAtt" : ["IAMProfileCreateAMI", "Arn"] },
                                                {"Fn::GetAtt" : ["IAMProfileControl", "Arn"] },
                                                {"Fn::GetAtt" : ["IAMProfileTestRunner", "Arn"] }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": ["ec2:RunInstances", "ec2:CreateTags", "ec2:TerminateInstances", "ec2:StopInstances"],
                                    "Resource": [
                                        "arn:aws:ec2:*:*:subnet/*",
                                        "arn:aws:ec2:*:*:volume/*",
                                        "arn:aws:ec2:*:*:security-group/*",
                                        "arn:aws:ec2:*:*:network-interface/*",
                                        "arn:aws:ec2:*::image/*",
                                        "arn:aws:ec2:*:*:key-pair/*"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "UserName" : {"Fn::Join": [ ".", [{"Ref":"EnvName"}, "jenkins" ]]}
            }
        }
    },
    "Outputs": {
        "VpcId":{
            "Description": "The Automation Test VPC Id",
            "Value": {"Ref": "VPC" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "VpcId" ]]}}
        },
        "ControlSubnetId": {
            "Description": "The Automation Test Control SubnetId",
            "Value": { "Ref": "ControlSubnet" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "ControlSubnetId" ]]}}
        },
        "DockerServerSubnetId": {
            "Description": "The Automation Test DockerServer SubnetId",
            "Value": { "Ref": "DockerServerSubnet" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServerSubnetId" ]]}}
        },
        "TestRunnerSubnetId": {            
            "Description": "The Automation Test TestRunner SubnetId",
            "Value": { "Ref": "TestRunnerSubnet" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunnerSubnetId" ]]}}
        },
        "CreateAmiSubnetId": {            
            "Description": "The Automation Test TestRunner SubnetId",
            "Value": { "Ref": "DockerServerSubnet" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAmiSubnetId" ]]}}
        },
        "InternalSubnetId": {            
            "Description": "The Automation Test Internal SubnetId",
            "Value": { "Ref": "DockerServerSubnet" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "InternalSubnetId" ]]}}
        },
        "Domain": {            
            "Description": "The Automation Test Domain",
            "Value": { "Ref": "Domain" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Domain" ]]}}
        },
        "DockerServerProfile": {            
            "Description": "The Automation Test DockerServer Instance Profile",
            "Value": { "Ref": "IAMProfileDockerServer" },
            "Export": { "Name":{"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DockerServerProfile" ]]}}
        },
        "ControlProfile": {
            "Description": "The Automation Test Control Instance Profile",
            "Value": { "Ref": "IAMProfileControl" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "ControlProfile" ]]}}
        },
        "TestRunnerProfile": {
            "Description": "The Automation Test TestRunner Instance Profile",
            "Value": { "Ref": "IAMProfileTestRunner" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunnerProfile" ]]}}
        },
        "CreateAMIProfile": {
            "Description": "The Automation Test TestRunner Instance Profile",
            "Value": { "Ref": "IAMProfileCreateAMI" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMIProfile" ]]}}
        },
        "DomainName": {
            "Description": "The Automation Test Domain Name",
            "Value": { "Ref": "DomainName" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "DomainName"]]}}
        },
        "ControlSecurityGroup": {
            "Description": "The Automation Test Control Slave SecurityGroup",
            "Value": { "Ref": "ControlSecurityGroup" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "ControlSecurityGroup"]]}}
        },
        "CreateAMISecurityGroup": {
            "Description": "The Automation Test CreateAMI SecurityGroup",
            "Value": { "Ref": "CreateAMISecurityGroup" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "CreateAMISecurityGroup"]]}}
        },
        "TestRunnerSecurityGroup": {
            "Description": "The Automation Test Runner SecurityGroup",
            "Value": { "Ref": "ControlSecurityGroup" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "TestRunnerSecurityGroup"]]}}
        },
        "Bucket": {
            "Description": "The Automation Test S3 Bucket",
            "Value": { "Ref": "Bucket" },
            "Export": { "Name": {"Fn::Join": [ "-", [{"Ref":"EnvName"}, "Bucket"]]}}
        },
        "JenkinsUser": {
            "Description": "The Automation Test JenkinsUser",
            "Value": { "Ref": "JenkinsUser" }
        },
        "NATIP" : {
            "Description": "The Automation Test NAT IP",
            "Value": { "Ref": "NATGatewayIP" }
        }
    }
}